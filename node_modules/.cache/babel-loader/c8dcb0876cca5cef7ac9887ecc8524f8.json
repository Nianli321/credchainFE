{"ast":null,"code":"const {\n  generateKeyPair\n} = require('crypto');\ngenerateKeyPair('ec', {\n  namedCurve: 'secp256k1',\n  // Options\n  publicKeyEncoding: {\n    type: 'spki',\n    format: 'der'\n  },\n  privateKeyEncoding: {\n    type: 'pkcs8',\n    format: 'der'\n  }\n}, (err, publicKey, privateKey) => {\n  // Callback function\n  if (!err) {\n    // Prints new asymmetric key\n    // pair after encoding\n    console.log(\"Public Key is: \", publicKey.toString('hex'));\n    console.log();\n    console.log(\"Private Key is: \", privateKey.toString('hex'));\n  } else {\n    // Prints error\n    console.log(\"Errr is: \", err);\n  }\n});\nexport function generateDID(uid) {\n  // dummy did\n  return \"0x3a1aedf9da7b8060ddbd0b80f7ebf7ae2de5a05d622e60a1fdb74774846db28f\";\n}","map":{"version":3,"names":["generateKeyPair","require","namedCurve","publicKeyEncoding","type","format","privateKeyEncoding","err","publicKey","privateKey","console","log","toString","generateDID","uid"],"sources":["/Users/nian/credchain_frontend/src/utilities.js"],"sourcesContent":["const { generateKeyPair } = require('crypto');\ngenerateKeyPair('ec', {\n    namedCurve: 'secp256k1',   // Options\n    publicKeyEncoding: {\n      type: 'spki',\n      format: 'der'\n    },\n    privateKeyEncoding: {\n      type: 'pkcs8',\n      format: 'der'\n    }\n  },\n   (err, publicKey, privateKey) => { // Callback function\n         if(!err)\n         {\n           // Prints new asymmetric key\n           // pair after encoding\n           console.log(\"Public Key is: \",\n                    publicKey.toString('hex'));\n           console.log();\n           console.log(\"Private Key is: \",\n                   privateKey.toString('hex'));\n         }\n         else\n         {\n           // Prints error\n           console.log(\"Errr is: \", err);\n         }\n           \n    });\n\n\n\n\n\nexport function generateDID (uid)  {\n    // dummy did\n    return  \"0x3a1aedf9da7b8060ddbd0b80f7ebf7ae2de5a05d622e60a1fdb74774846db28f\";\n}"],"mappings":"AAAA,MAAM;EAAEA;AAAgB,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC7CD,eAAe,CAAC,IAAI,EAAE;EAClBE,UAAU,EAAE,WAAW;EAAI;EAC3BC,iBAAiB,EAAE;IACjBC,IAAI,EAAE,MAAM;IACZC,MAAM,EAAE;EACV,CAAC;EACDC,kBAAkB,EAAE;IAClBF,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE;EACV;AACF,CAAC,EACA,CAACE,GAAG,EAAEC,SAAS,EAAEC,UAAU,KAAK;EAAE;EAC5B,IAAG,CAACF,GAAG,EACP;IACE;IACA;IACAG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EACpBH,SAAS,CAACI,QAAQ,CAAC,KAAK,CAAC,CAAC;IACnCF,OAAO,CAACC,GAAG,EAAE;IACbD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EACtBF,UAAU,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,MAED;IACE;IACAF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,GAAG,CAAC;EAC/B;AAEL,CAAC,CAAC;AAMN,OAAO,SAASM,WAAWA,CAAEC,GAAG,EAAG;EAC/B;EACA,OAAQ,oEAAoE;AAChF"},"metadata":{},"sourceType":"module"}